@model List<SalarySheetRecord>
@{
    ViewData["Title"] = "Salary Sheet";
    var origiSalaries = 0;
    var attendPenalties = 0;
    int unpaidVacationDeduction = 0;
    var insuranceDeduction = 0;
    var loans = 0;
    var otherDeductions = 0;
    var housing = 0;
    var trans = 0;
    var otherAdditions = 0;
    var finalSalaries = 0;

}

<h1 id="title">Employees Salary Sheet of @ViewBag.StartDate to @ViewBag.EndDate</h1>

<div class="row mt-4">

    @if (Model.Any() && !Model[0].Editable)
    {
        <div class="col-12 mb-2 px-3">
            <button class="btn btn-outline-default" type="button" onclick="exportTableToCSV('Salary Sheet.csv')">Export as CSV </button>
            <button class="btn btn-outline-default" type="button" onclick="exportTableToExcel('table', 'Salary Sheet', 'Salary Sheet');">Export as Excel </button>
        </div>
    }

    <div class="col-sm-12">

        @using (Html.BeginForm("Index", "SalarySheet", FormMethod.Post))
        {
            <input type="hidden" name="n" value="@ViewBag.Next">
            <div class="table-responsive col-12">
                <table class="table table-hover table-striped" id="table">
                    <thead class="thead-dark">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Employee Name</th>
                            <th scope="col">Salary</th>
                            <th scope="col">Attendance Penalties</th>
                            <th scope="col">Unpaid Vacation Deduction</th>
                            <th scope="col">Insurance Deduction</th>
                            <th scope="col">Loan Deduction</th>
                            <th scope="col">Other Deductions</th>
                            <th scope="col">Housing Allowance</th>
                            <th scope="col">Transportation Allowance</th>
                            <th scope="col">Other Additions</th>
                            <th scope="col">Final Salary</th>
                            <th scope="col">Comment</th>
                        </tr>
                    </thead>
                    <tbody class="auto-index text-center">
                        @if (Model.Count() > 0)
                        {

                            @for (var i = 0; i < Model.Count; i++)
                            {
                                @Html.HiddenFor(x => x[i].UserID)
                                @Html.HiddenFor(x => x[i].EndDate)

                                origiSalaries += @Model[i].Salary;
                                attendPenalties += @Model[i].AttendancePenalties;
                                unpaidVacationDeduction += @Model[i].UnpaidVacationDeduction;
                                insuranceDeduction += @Model[i].InsuranceDeduction;
                                loans += @Model[i].LoanDeduction;
                                otherDeductions += @Model[i].OtherDeductions;
                                housing += @Model[i].HousingAllowance;
                                trans += @Model[i].TransportationAllowance;
                                otherAdditions += @Model[i].OtherAdditions;
                                finalSalaries += @Model[i].FinalSalary;

                                <tr>
                                    <th scope="col"></th>
                                    @if (!Model[i].Editable)
                                    {

                                        <td class="text-left">@Model[i].UserName</td>
                                        <td>@Model[i].Salary</td>
                                        <td class="text-danger">@Model[i].AttendancePenalties</td>
                                        <td class="text-danger">@Model[i].UnpaidVacationDeduction</td>
                                        <td class="text-danger">@Model[i].InsuranceDeduction</td>
                                        <td class="text-danger">@Model[i].LoanDeduction</td>
                                        <td class="text-danger">@Model[i].OtherDeductions</td>
                                        <td class="text-green">@Model[i].HousingAllowance</td>
                                        <td class="text-green">@Model[i].TransportationAllowance</td>
                                        <td class="text-green">@Model[i].OtherAdditions</td>
                                        <td class="font-weight-800 text-green">@Model[i].FinalSalary</td>
                                        <td class="text-left text-wrap">@Model[i].Comment</td>
                                    }
                                    else
                                    {
                                        <td class="text-left">@Model[i].UserName</td>
                                        <td>@Model[i].Salary</td>
                                        @Html.HiddenFor(x => x[i].Salary)
                                        <td>
                                            @Html.TextBoxFor(x => x[i].AttendancePenalties,
new { type = "number", min = "0", @class = "form-control deduction" })
                                        </td>                                        <td>
                                            @Html.TextBoxFor(x => x[i].UnpaidVacationDeduction,
new { type = "number", min = "0", @class = "form-control deduction" })
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(x => x[i].InsuranceDeduction,
new { type = "number", min = "0", @class = "form-control deduction" })
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(x => x[i].LoanDeduction,
new { type = "number", min = "0", @class = "form-control deduction" })
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(x => x[i].OtherDeductions,
new { type = "number", min = "0", @class = "form-control deduction" })
                                        </td>
                                        <td>@Model[i].HousingAllowance</td>
                                        @Html.HiddenFor(x => x[i].HousingAllowance)

                                        <td>@Model[i].TransportationAllowance</td>
                                        @Html.HiddenFor(x => x[i].TransportationAllowance)

                                        <td>
                                            @Html.TextBoxFor(x => x[i].OtherAdditions,
new { type = "number", min = "0", @class = "form-control addition" })
                                        </td>
                                        <td class="final-salary font-weight-800">@Model[i].FinalSalary</td>
                                        <td>
                                            @Html.TextBoxFor(x => x[i].Comment,
new { @class = "form-control", style = "width: 250px" })
                                        </td>
                                    }
                                </tr>
                            }
                            @if (!Model[0].Editable)
                            {
                                <tr class="font-weight-800">
                                    <td colspan="2">Totals</td>
                                    <td>@origiSalaries</td>
                                    <td>@attendPenalties</td>
                                    <td>@unpaidVacationDeduction</td>
                                    <td>@insuranceDeduction</td>
                                    <td>@loans</td>
                                    <td>@otherDeductions</td>
                                    <td>@housing</td>
                                    <td>@trans</td>
                                    <td>@otherAdditions</td>
                                    <td>@finalSalaries</td>
                                    <td></td>
                                </tr>
                            }
                        }
                        else
                        {

                            <tr><td colspan="100" class="text-center">Salary Sheet for this month is not available yet</td></tr>

                        }

                    </tbody>

                </table>
            </div>

            <div class="row justify-content-between mt-2">
                <div class="row px-3">
                    @if (Model.Any() && Model[0].Editable)
                    {
                        <div class="col-12"><button type="submit" class="btn btn-success">Generate Salery Sheet</button></div>
                    }
                    else if (Model.Any())
                    {
                        <div class="col-sm-12">
                            <a class="btn btn-default" asp-route-edit="true" asp-route-n="@ViewBag.Next">Edit</a>
                        </div>
                    }
                </div>
                <div>
                    <a class="btn btn-secondary" asp-route-n="@(ViewBag.Next-1)">Previous month</a>
                    <a class="btn btn-secondary" asp-route-n="@(ViewBag.Next+1)">Next month</a>
                </div>
            </div>
        }

    </div>
</div>

@section Scripts{
    <script src="~/js/export-to-file.js"></script>
    <script>
        $(".deduction").focusout(function () {
            var finalSalary = parseInt($(this).parent().siblings(".final-salary").text());
            var deduction = parseInt($(this).val());
            var amount = finalSalary - deduction;
            $(this).parent().siblings(".final-salary").text(amount);
        });
        $(".addition").focusout(function () {
            var finalSalary = parseInt($(this).parent().siblings(".final-salary").text());
            var addition = parseInt($(this).val());
            var amount = finalSalary + addition;
            $(this).parent().siblings(".final-salary").text(amount);
        });

        $(".deduction").focusin(function () {
            var finalSalary = parseInt($(this).parent().siblings(".final-salary").text());
            var deduction = parseInt($(this).val());
            var amount = finalSalary + deduction;
            $(this).parent().siblings(".final-salary").text(amount);
        });
        $(".addition").focusin(function () {
            var finalSalary = parseInt($(this).parent().siblings(".final-salary").text());
            var addition = parseInt($(this).val());
            var amount = finalSalary - addition;
            $(this).parent().siblings(".final-salary").text(amount);
        });

    </script>
}